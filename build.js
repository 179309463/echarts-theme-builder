const fs = require('fs');
const UglifyJS = require('uglify-js');
const path = require('path');
const sass = require('node-sass');
const copydir = require('copy-dir');
const config = require('./config/env');
const fse = require('fs-extra');

const htmlTpl = `
<!--
AUTOGENERATED. DON'T MODIFY
-->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
{{body}}
</body>
</html>
`;

function build() {
    function bundleJS(files) {
        const output = [];
        for  (let filePath of files) {
            output.push(fs.readFileSync(
                path.resolve(__dirname, filePath), 'utf-8'
            ));
        }
        const outputCode = output.join('\n');
        const result = UglifyJS.minify(outputCode, {
            mangle: true
        });
        return result.code;
    }

    // Bundle sass
    const cssResult = sass.renderSync({
        file: path.resolve(__dirname, 'app/styles/main.scss'),
        outputStyle: 'compressed'
    });

    ['en', 'zh'].forEach(function (lang) {
        const jsPostfix = lang === 'en' ? '_en' : '';
        fs.writeFileSync(path.resolve(__dirname, `app/${lang}/app.min.js`), bundleJS([
            `app/scripts/components${jsPostfix}.js`,
            `app/scripts/options${jsPostfix}.js`,
            `app/scripts/main${jsPostfix}.js`
        ]), 'utf-8');
        // Write css
        fs.writeFileSync(path.resolve(__dirname, `app/${lang}/main.css`), cssResult.css);
        fs.writeFileSync(path.resolve(__dirname, `app/${lang}/main.css`), cssResult.css);

        // Build html
        fs.writeFileSync(
            path.resolve(__dirname, `app/${lang}/index.html`),
            htmlTpl.replace('{{body}}', fs.readFileSync(path.resolve(__dirname, `app/${lang}/body.html`)), )
        );
    });
}

build();

if (process.argv.indexOf('--release') >= 0) {
    ['en', 'zh'].forEach(function (lang) {
        const targetDir = path.join(config.echartsWWWDir, `_generated/${lang}/theme-builder`);
        fse.ensureDirSync(targetDir);
        copydir.sync(path.resolve(__dirname, `app/${lang}`), targetDir);
    });
}